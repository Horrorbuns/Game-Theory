<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_arena_selection</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Arena Names
arena[0] = "Lava Planet";
arena[1] = "Spike World";
arena[2] = "Training Stage";

//Default Menu Positions
menu_selection = 0;
arena_selection = 0;
mode_selection = 0;
rule_selection = 0;

//Establish different stocks.
stock_selection[0] = 3;
stock_selection[1] = 5;
stock_selection[2] = 7;

//Establish different times.
time_selection[0] = 30;
time_selection[1] = 60;
time_selection[2] = 90;

arena_selected = false;
rules_selected = false;
can_confirm = true;

mode_name[0] = "Stock Limit";
mode_name[1] = "Time Limit";

//Text Array
textX[0] = 208;
textX[1] = 640;
textX[2] = 1072;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_confirm = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Navigation Controls

var p1 = global.player1_pad;

left = gamepad_button_check_pressed(p1, gp_padl);
right = gamepad_button_check_pressed(p1,gp_padr);
up = gamepad_button_check_pressed(p1, gp_padu);
down = gamepad_button_check_pressed(p1, gp_padd) // Check the buttons.
confirm = gamepad_button_check_pressed(p1, gp_start) || gamepad_button_check_pressed(p1,gp_face1);
go_back = gamepad_button_check_pressed(p1, gp_face2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_font(font_HUD);
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

xpos = room_width/2;
ypos = room_height/2;

recX1 = 0;
recX2 = 440-8;
recX3 = 872-8;

recXPOS = 408;
recY1 = 192;
recY2 = 240 + recY1;



textX1 = 208;
textX2 = 640;
textX3 = 1072;
textY = 450;

draw_set_color(c_red) // Draw Rectangle Color


//Navigate Arena Menu
if (left &amp;&amp; arena_selected = false)
{
    arena_selection -= 1;
    if (arena_selection &lt; 0) arena_selection = 2;
}

if (right &amp;&amp; arena_selected = false)
{
    arena_selection += 1;
    if (arena_selection &gt; 2) arena_selection = 0;
}


// Draw Menu Selections
if arena_selected = false
{
    for (i=0;i&lt;3;i++)
    {
        if (arena_selection = i) draw_set_color(c_red);
        else draw_set_color(c_white);   
        draw_text(textX[i],textY,arena[i]);
    }
}

draw_set_color(c_white);
draw_set_font(font_main);
draw_text(room_width/2, room_height-150,"(Press A/Start to Confirm | Press B to Return to Menu)");


draw_set_font(font_HUD);



if (confirm &amp;&amp; arena_selected = false) // Select Arena
{
    arena_selected = true;
    can_confirm = false;
    alarm[0] = 2;
}
 

// ------------------------------------ Arena Selected Menu


if (arena_selected = true) 
{   
  
    
    draw_set_color(c_black)
    draw_roundrect((room_width/2)-300,(room_height/2)-100,(room_width/2)+300,(room_height/2)+100,0);
    draw_set_color(c_white)
    
    
    //Popup Window Navigation
    if (menu_selection = 0)
    {
        if (left) 
        {
            mode_selection -= 1;
            if (mode_selection &lt; 0) mode_selection = 1;
        }
        
        if (right)
        {
            mode_selection += 1;
            if (mode_selection &gt; 1) mode_selection = 0;
        }
    }
    
    if (menu_selection = 1)
    {
            if (left)
            {
                rule_selection -= 1;
                if (rule_selection &lt; 0) rule_selection = 2;
            }
            
            if (right)
            {
                rule_selection += 1;
                if (rule_selection &gt; 2) rule_selection = 0;
            }
    }

    
    // Draw the color of current menu_selection.
    
    // ---- Menu Selection Navigation
    
    if up
    {
        menu_selection -= 1;
        if (menu_selection &lt; 0) menu_selection = 1;
    }
    
    if down
    {
        menu_selection += 1;
        if (menu_selection &gt; 1) menu_selection = 0;
    }
    
    // ----
    
    if menu_selection = 0
    {
        draw_set_color(c_red);
    }
    
    else draw_set_color(c_white);
    
    draw_text(room_width/2, room_height/2-16, "Gamemode: " + string(mode_name[mode_selection]));
    
    // ---- Stock Rules ---- //
    
    if mode_selection = 0
    {
        if (menu_selection = 1) draw_set_color(c_red);
        else draw_set_color(c_white);
    
        draw_text(xpos,ypos+16, "Life Count: " + string(stock_selection[rule_selection]));
    
        
        draw_set_color(c_white); // Reset draw color.
        
        draw_set_font(font_main)
        
        if confirm &amp;&amp; can_confirm = true
        {
            global.reset = stock_selection[rule_selection];
            switch(arena_selection)
        {
            case 0: 
                room_goto(room_lava_stock);
                break;
                
            case 1:
                room_goto(room_spike_stock);
                break;
                
            case 2:
                room_goto(room_train_stock);
                break;
                
            default:
                room_goto(room_prototype);
                break;
        }
        }
        
    }
    
       
    // ---- Timed Rules ---- //
    
    else if mode_selection = 1
    {
        draw_set_font(font_HUD);
        if (menu_selection = 1) draw_set_color(c_red);
        else draw_set_color(c_white)
    
        draw_text(xpos,ypos+16, "Time: " + string(time_selection[rule_selection]));
        // Confirm code to set global time limit.
    
         draw_set_color(c_white);
         draw_set_font(font_main)
        
    
    
        if confirm &amp;&amp; can_confirm = true 
        {
            
            global.reset_time = time_selection[rule_selection];
            switch(arena_selection)
            {
            case 0: 
                room_goto(room_lava_timed);
                break;
                
            case 1:
                room_goto(room_spike_timed);
                break;
                
            case 2:
                room_goto(room_train_timed);
                break;
                
            default:
                room_goto(room_prototype);
                break;
            }
            
        }
    
    }
    
    
    if (go_back) arena_selected = false;
    
}


// --------------------- End Arena Selected Menu


if go_back &amp;&amp; arena_selected = true
{
    arena_selected = false;
}


if go_back &amp;&amp; arena_selected = false //Go back to main menu.
{
    room_goto(room_title);
}


if keyboard_check_pressed(vk_escape)
{
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
