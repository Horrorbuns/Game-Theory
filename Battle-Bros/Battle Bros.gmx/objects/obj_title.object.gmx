<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_title</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Title Screen Variables

start_pressed = false;

current_selection = 0;

menu_choice[0] = "Arena Selection";
menu_choice[1] = "How to Play";
menu_choice[2] = "Credits";
menu_choice[3] = "Quit Game";
menu_choice[4] = "(Press A or Start to Confirm)";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Navigation Keys

confirm = gamepad_button_check_pressed(global.player1_pad,gp_face1) ||
          gamepad_button_check_pressed(global.player1_pad,gp_start);

go_back = gamepad_button_check_pressed(global.player1_pad,gp_face2);

up = gamepad_button_check_pressed(global.player1_pad, gp_padu);
down = gamepad_button_check_pressed(global.player1_pad, gp_padd);


if (up)
{
    current_selection -= 1;
    if (current_selection &lt; 0) current_selection = 3;
}

if (down)
{
    current_selection += 1;
    if (current_selection &gt; 3) current_selection = 0;
}


if keyboard_check_pressed(vk_escape)
{
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room Navigation

if (confirm &amp;&amp; start_pressed = true)
{
    switch(current_selection)
    {
        case 0: room_goto(room_arena_selection);
        break;
        
        case 1: room_goto(room_controls);
        break;
        
        case 2: room_goto(room_credits);
        break;
        
        case 3: game_end();
    }
}  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_font(font_HUD);
draw_set_color(c_red); // Draw Text Color

draw_set_halign(fa_center); // Set Alignment 
draw_set_valign(fa_middle); 

if (start_pressed = false)
{  
draw_text(room_width/2,room_height-180,"Player 1 Press Start!");
    if gamepad_button_check_pressed(global.player1_pad,gp_start)
    {
        start_pressed = true;
    }
}

draw_set_color(c_white)
if (start_pressed = true)
{
    for (i = 0; i &lt;= 4; i++)
    {
        if current_selection = i
        {
            draw_set_color(c_red);
        }
        else draw_set_color(c_white);
        if (i == 4) draw_set_font(font_main);
        else draw_set_font(font_HUD);
        draw_text(room_width/2, room_height-(170-(i*32)),menu_choice[i]);
    }

}




draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
